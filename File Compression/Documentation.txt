///////////////////////////////// Documentation /////////////////////////////////////

    Author: Fathy Abdlhady


    1) Description
    ---------------
    
    The String minify() function delete all newline characters and unnecessary spaces in XML or JSON file
    first we invoke FileSampleEnhanced.readFileParsed() function which
    returns an Arraylist of type String that has all the lines in the file
    then we iterate each line and eliminate newline characters and making all contiguous spaces a single space
    here is an example  "   <    note     >
					<body>Don't forget              me this weekend!</body      >
				<     /note      >
				"
    
    the result is  " < note > <body>Don't forget me this weekend!</body > < /note > "

    Then we check each space and see if it needs to be deleted or not
    so if we take the above result " < note > <body>Don't forget me this weekend!</body > < /note > "
    Then the final result will be  "<note><body>Don't forget me this weekend!</body></note>" 
    
    
    2) Time Complexity & Space Complexity
    --------------------------------------
    
    Assuming that (n) is the total number of characters in the whole file.
    Then Time Comlexity is O(n^2) & Space Complexity is O(n)


///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////


    Author: Abdallah Mohamed (@AntiHexCode)


    1) Breif Description
    ---------------------
    
    The compressFile(String fileType, ArrayList<String> linesParsed) function takes 
    a string as an argument which represents the the type of the file that will be
    compressed, and it's either a "JSON" or "XML" file. It also takes an ArrayList
    which contains the lines of the file to be compressed.
    
    The Algorithm used iterates over all the lines while rewriting each uniqe 
    tag as a single unique character and stores the tag and the corresponding 
    unique character, so we can go back to the original text using the decompressFile().
    
    The key idea is that instead of writing multiple characters to represent a single tag,
    we just write a unique single character, which decreases the size ofthe file leading 
    to a file compression.
    
    The decompressFile(String fileType,ArrayList<String> linesParsed) function simply 
    does the opposite, knowing the unique character for each tag, we loop over each line
    and rewrite each unique character with its corresponding tag that we stored earlier.

    Each function returns a string, the first function returns a string which contains
    the compressed content of the file, and the second function returns a string which
    contains the decompressed content of the file.
    
    
    2) Time Complexity
    -------------------
    
    Each function take (approx.) a time complexity of O(n) in the worst case.
    Assuming that (n) is the total number of characters in the whole file.


    3) Space Complexity
    --------------------

    Each function take (approx.) a space complexity of O(m) in the worst case.
    Assuming that (m) is the total number of words in the whole file.


    ///////////////////////////////////////////////////////////////////////////////////////
